#ifndef _LEAPMOTION
#define _LEAPMOTION

class LeapMotion
{
    var channel;
    var data;
    var port;

    var reduction_factor;
    var dataValues;

    Connect();
    UpdatePos(palm_pos, f0_pos, f1_pos);
};

function LeapMotion::LeapMotion(p)
{
    port = p;
    reduction_factor = 10;
    dataValues = {"0",0,0,0, 0,0,0 ,0,0,0};
    //		handID, palmX, palmY, palmZ, f0X, ... f1X...
}

function LeapMotion::Connect()
{
    var t = 3;
    do
    {
        channel = NetCreateChannel(port, 0, VR_NO_BLOCKING);

        if(channel !=0) //not working, XVR crash
        {
            OutputLN("Connected to LeapMotion");
            return true;
        }
        else
        {
            OutputLN("Connection Fail, try: " + t);
            t--;
            Sleep(1000);
        }
    } while(t > 0);

    return false;
}

function LeapMotion::UpdatePos(palm_pos, f0_pos, f1_pos)
{
    if(NetDataReady(channel))
	{
		var data = "";
		var recIp = "";
		data = NetReceiveFrom(channel, &recIP);
		Sscanf(data,"%s (%f, %f, %f)(%f, %f, %f)(%f, %f, %f)", &dataValues[0], &dataValues[1],&dataValues[2],&dataValues[3],&dataValues[4],&dataValues[5],&dataValues[6], &dataValues[7],&dataValues[8],&dataValues[9] );

		palm_pos = [-dataValues[3] / reduction_factor, dataValues[2]/ reduction_factor -20, dataValues[1]/ reduction_factor];
		f0_pos = [-dataValues[6] / reduction_factor, dataValues[5]/ reduction_factor -20, dataValues[4]/ reduction_factor];
		f1_pos = [-dataValues[9] / reduction_factor, dataValues[8]/ reduction_factor -20, dataValues[7]/ reduction_factor];
	}
}

#endif
